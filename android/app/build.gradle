apply plugin: "com.android.application"

apply plugin: 'com.google.gms.google-services'

import com.android.build.OutputFile

project.ext.react = [
  entryFile: "index.js",
  // enableHermes: true 
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/@sentry/react-native/sentry.gradle"

def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = false
def jscFlavor = "org.webkit:android-jsc:+"
def enableHermes = false

android {
  ndkVersion rootProject.ext.ndkVersion
  compileSdkVersion rootProject.ext.compileSdkVersion
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  signingConfigs {
     release {
      // storeFile file("../keystores/release.keystore")
      // storePassword "my-release-keyPw"
      // keyAlias "my-key-alias"
      // keyPassword "my-release-keyPw"

      storeFile file('brekekekey.keystore')
      storePassword 'xqytw246'
      keyAlias 'brekekekey'
      keyPassword 'xqytw246'
    }
  }

  defaultConfig {
    applicationId "com.brekeke.phonedev"
    versionCode 400000
    versionName "4.0.0"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    multiDexEnabled true
  }

  splits {
    abi {
      reset()
      enable enableSeparateBuildPerCPUArchitecture
      universalApk false // If true, also generate a universal APK
      include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
    }
  }

  buildTypes {
    release {
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      signingConfig signingConfigs.release
      // debuggable true
    }
  }

  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def versionCodes = ["x86":1,"x86_64":2,"armeabi-v7a":3,"arm64-v8a":4]
      def abi = output.getFilter(OutputFile.ABI)
      if (abi != null) {
        output.versionCodeOverride =
          defaultConfig.versionCode * 1000 + versionCodes.get(abi)
      }
    }
  }
}

dependencies {

  // implementation 'com.android.support:multidex:2.0.1'
  // implementation 'androidx.multidex:multidex:2.0.1'
  // implementation 'com.android.support:appcompat-v7:27.0.0'
  //   implementation 'com.android.support:design:27.0.0'
  //   implementation 'com.android.support:support-v4:27.1.1'

  implementation 'com.google.firebase:firebase-messaging:21.1.0'
  
  implementation("com.google.firebase:firebase-iid")
  implementation platform('com.google.firebase:firebase-bom:28.4.1')
  implementation 'com.google.firebase:firebase-analytics'

  implementation fileTree(dir: "libs", include: ["*.jar"])
  implementation "com.facebook.react:react-native:+"

  implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

  debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
    exclude group:"com.facebook.fbjni"
  }
  debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
    exclude group:"com.facebook.flipper"
    exclude group:"com.squareup.okhttp3", module:"okhttp"
  }
  debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
    exclude group:"com.facebook.flipper"
  }

  if (enableHermes) {
    def hermesPath = "../../node_modules/hermes-engine/android/"
    debugImplementation files(hermesPath + "hermes-debug.aar")
    releaseImplementation files(hermesPath + "hermes-release.aar")
  } else {
    implementation jscFlavor
  }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

// react-native-fcm
apply plugin: "com.google.gms.google-services"
